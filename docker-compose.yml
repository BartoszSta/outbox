---
version: '2'
services:

  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: outbox
      POSTGRES_USER: ${POSTGRES_USER:-outbox-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-outbox-pwd}
      PGDATA: /data/outbox
      ALLOW_IP_RANGE: 0.0.0.0/0
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  flyway:
    image: flyway/flyway
    command: -url=jdbc:postgresql://postgres:5432/outbox -user=outbox-user -password=outbox-pwd -connectRetries=60 migrate
    volumes:
      - ./src/main/resources/db-migration:/flyway/sql
    depends_on:
      - postgres
    networks:
      - postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"

  kafka1:
    image: confluentinc/cp-enterprise-kafka:5.1.2
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka1:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      KAFKA_JMX_PORT: 9991

  jaeger-allinone:
    image: jaegertracing/all-in-one:1.39
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 16686:16686
      - 14250:14250
      - 14268:14268
    networks:
      - postgres

  otel-collector:
    image: otel/opentelemetry-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - 1888:1888   # pprof extension
      - 8888:8888   # Prometheus metrics exposed by the collector
      - 8889:8889   # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317   # OTLP gRPC receiver
      - 4318:4318   # OTLP http receiver
      - 55679:55679 # zpages extension
    networks:
      - postgres

  prometheus:
    image: prom/prometheus:v2.36.2
    ports:
      - 9000:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
    networks:
      - postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"

  schemaregistry:
    image: confluentinc/cp-schema-registry:5.1.2
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    ports:
      - 8085:8085


networks:
  postgres:

volumes:
  postgres:
  pgadmin:
  prometheus-data: